using System.Reflection;
using Application;
using Infrastructure;
using Infrastructure.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.OpenApi.Models;
using WebApi.Middlewares;

namespace WebApi;

public class Startup
{
    public Startup(IConfiguration configuration)
    {
        Configuration = configuration;
    }

    public IConfiguration Configuration { get; }

    // This method gets called by the runtime. Use this method to add services to the container.
    public void ConfigureServices(IServiceCollection services)
    {
        var connectionString = Configuration.GetConnectionString("DefaultConnection");
        services.AddDbContext<ApplicationDbContext>(options =>
        {
            options.UseSqlServer(connectionString,
                                 option =>
                                     option.MigrationsAssembly("Infrastructure"))
                   .EnableSensitiveDataLogging()
                   .LogTo(Console.WriteLine, LogLevel.Information);
        });
        services.AddApplicationServices();
        services.AddInfrastructureServices();
        services.AddAutoMapper(typeof(Startup));
        services.AddControllers();
        services.AddSwaggerGen(c =>
        {
            c.SwaggerDoc("v1", new OpenApiInfo {Title = "Church Management", Version = "v1"});

            //Locate the XML file being generated by ASP.NET...
            var xmlFile = $"{Assembly.GetExecutingAssembly().GetName().Name}.XML";
            var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);

            //... and tell Swagger to use those XML comments.
            c.IncludeXmlComments(xmlPath);
        });
        services.AddCors(op =>
        {
            op.AddPolicy("webApp",
                         config =>
                         {
                             config.AllowAnyOrigin();
                             config.AllowAnyMethod();
                             config.AllowAnyHeader();
                         });
        });
    }

    // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
    public void Configure(IApplicationBuilder app,
                          IWebHostEnvironment env)
    {
        // if (env.IsDevelopment())
        // {
        //     app.UseDeveloperExceptionPage();
        //     app.UseMiddleware<GlobalExceptionHandlerMiddleware>();
        // }

        app.UseMiddleware<TenantMiddleware>();
        app.UseMiddleware<GlobalExceptionHandlerMiddleware>();

        //This line enables the app to use Swagger with the configuration in the ConfigureServices method.
        app.UseSwagger();

        //This line enables Swagger UI
        app.UseSwaggerUI(c =>
        {
            c.SwaggerEndpoint("/swagger/v1/swagger.json",
                              "Church Management v1");
        });

        app.UseHttpsRedirection();

        app.UseRouting();

        app.UseCors("webApp");
            
        app.UseAuthorization();

        app.UseEndpoints(endpoints => { endpoints.MapControllers(); });
    }
}